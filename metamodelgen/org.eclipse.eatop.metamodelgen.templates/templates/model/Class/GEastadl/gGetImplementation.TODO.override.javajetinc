<%//GEastadl ###############%>
<%GAwareGenFeature gGenFeature = (GAwareGenFeature)genFeature;%>
<%if(gGenFeature.isGGenFeature()){%>
	<% TargetFeaturePath tgtFeaturePath = gGenFeature.getTargetFeaturePath(genClass);%>
	<% if(tgtFeaturePath.getClass().equals(NoMappingTargetFeaturePath.class)){%>
		<%@ include file="unsupportedGEastadlFeature.insert.javajetinc" %>
	<% } else {%>
		<% /**** Simple Case: Single-Segmented TargetFeaturePath ****/ %>
		<% if(tgtFeaturePath.getSegmentCount() == 1) { %>
			<% if(gGenFeature.isListType()) { %>
				<% if(tgtFeaturePath.isListType()) { // List => List%>				
					<%=gGenFeature.getRawImportedType()%> untypedList = <%=tgtFeaturePath.getFirstFeature().getGetAccessor()%>();
					return untypedList;
				<% } else if(tgtFeaturePath.isJavaMappedType()) { // List => JavaMappedType %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[List => JavaMappedType]
				<% } else if(tgtFeaturePath.isEnumType()) { // List => Enum %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[List => Enum] 
				<% } else { // List => EObject%>
					// TODO: Provide an implementation which allows to modify the content of the EList in an appropriate way.
					<%=tgtFeaturePath.getLastFeature().getImportedType(genClass)%> <%=tgtFeaturePath.getLastFeature().getTypeGenClassifier().getSafeUncapName()%> = <%=tgtFeaturePath.getLastFeature().getGetAccessor()%>();	
					if(<%=tgtFeaturePath.getLastFeature().getTypeGenClassifier().getSafeUncapName()%> != null) {
			  			return new <%=genModel.getImportedName("org.eclipse.emf.ecore.util.EcoreEList")%>.UnmodifiableEList<<%=gGenFeature.getImportedElementType(genClass)%>>(this, eClass().getEStructuralFeature("<%=gGenFeature.getName()%>"), 1, new Object[]{<%=tgtFeaturePath.getLastFeature().getGetAccessor()%>()});
					}
					return new <%=genModel.getImportedName("org.eclipse.emf.ecore.util.EcoreEList")%>.UnmodifiableEList<<%=gGenFeature.getImportedElementType(genClass)%>>(this, eClass().getEStructuralFeature("<%=gGenFeature.getName()%>"), 0, new Object[]{});									
				<% } %>			
			<% } else if(gGenFeature.isJavaMappedType()) { %>
				<% if(tgtFeaturePath.isListType()) { // JavaMappedType => List%>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[JavaMappedType => List]
				<% } else if(tgtFeaturePath.isJavaMappedType()) { // JavaMappedType => JavaMappedType %>				
					<%=genModel.getImportedName(tgtFeaturePath.getImportedType(genClass))%> tgtFeatureValue = <%=tgtFeaturePath.getLastFeature().getGetAccessor()%>();
					<%@ include file="gGetReturnConvertedJavaType.insert.javajetinc" %>					
				<% } else if(tgtFeaturePath.isEnumType()) { // JavaMappedType => Enum %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[JavaMappedType => Enum] 
				<% } else { // JavaMappedType => EObject%>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[JavaMappedType => EObject] 
				<% } %>				
			<% } else if(gGenFeature.isEnumType()) { %>
				<% if(tgtFeaturePath.isEnumType()) { // Enum => Enum %>
					return <%=gGenFeature.getImportedType(genClass)%>.getByName(<%=tgtFeaturePath.getLastFeature().getGetAccessor()%>().getName());
				<% } else if(tgtFeaturePath.isListType()) { // Enum => List %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[Enum => List]
				<% } else if(tgtFeaturePath.isJavaMappedType()) { // Enum => JavaMappedType %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[Enum => JavaMappedType]															
				<% } else { // Enum => EObject %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[Enum => EObject]
				<% } %>   							
			<% } else { %>
				<%if(tgtFeaturePath.isListType()) { // EObject => List %>
					<%=tgtFeaturePath.getImportedType()%> list = <%=tgtFeaturePath.getLastFeature().getGetAccessor()%>();
					if(list.isEmpty()) {
						return null;
					}
					if(list.size() > 1) {
						throw new UnsupportedOperationException("Multiplicity Conflict: More than one element were found. GEastadl can not reduce them to one.");
					}
					<% if(tgtFeaturePath.getLastFeature().getEcoreFeature().getEType() != gGenFeature.getEcoreFeature().getEType()) { %>
						return (<%=gGenFeature.getEcoreFeature().getEType().getName()%>)list.get(0);
					<% } else { %>
						return list.get(0);
					<% } %>
				<% } else if(tgtFeaturePath.isJavaMappedType()) { // EObject => JavaMappedType %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[EObject => JavaMappedType]	
				<% } else if(tgtFeaturePath.isEnumType()) { // EObject => Enum %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[EObject => Enum]				
				<% } else { // EObject => EObject %>					
					return <%=tgtFeaturePath.getLastFeature().getGetAccessor()%>();								
				<% } %>
			<% } %>
		<% /**** Complex Case: TargetFeaturePath with multiple segments ****/ %>	
		<% } else if(tgtFeaturePath.getSegmentCount() > 1) { %>						
			<% if(gGenFeature.isListType()) { %>
				<% if(tgtFeaturePath.isListType()) { // List => List%>
					<%@ include file="gEvalTargetFeaturePath.insert.javajetinc" %>
					return new <%=genModel.getImportedName("org.eclipse.emf.ecore.util.EcoreEList.UnmodifiableEList")%><<%=genFeature.getTypeGenClassifier().getName()%>>(this, eClass().getEStructuralFeature("<%=gGenFeature.getName()%>"), untypedList.size(), untypedList.toArray());									
				<% } else if(tgtFeaturePath.isJavaMappedType()) { // List => JavaMappedType %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[List => JavaMappedType]
				<% } else if(tgtFeaturePath.isEnumType()) { // List => Enum %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[List => Enum]
				<% } else { // List => EObject%>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[List => EObject]									
				<% } %>			
			<% } else if(gGenFeature.isJavaMappedType()) { %>
				<% if(tgtFeaturePath.isListType()) { // JavaMappedType => List%>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[JavaMappedType => List]
				<% } else if(tgtFeaturePath.isJavaMappedType()) { // JavaMappedType => JavaMappedType %>					 
					<%@ include file="gBuildTargetFeaturePath.insert.javajetinc" %>
					<%=genModel.getImportedName(tgtFeaturePath.getImportedType(genClass))%> tgtFeatureValue = <%=previousFeature.getName()%>.<%=tgtFeaturePath.getLastFeature().getGetAccessor()%>();					
					<%@ include file="gGetReturnConvertedJavaType.insert.javajetinc" %>
				<% } else if(tgtFeaturePath.isEnumType()) { // JavaMappedType => Enum %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[JavaMappedType => Enum]
				<% } else { // JavaMappedType => EObject%>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[JavaMappedType => EObject] 
				<% } %>				
			<% } else if(gGenFeature.isEnumType()) { %>
				<% if(tgtFeaturePath.isEnumType()) { // Enum => Enum %>
					<%@ include file="gBuildTargetFeaturePath.insert.javajetinc" %>
					return <%=gGenFeature.getImportedType(genClass)%>.getByName(<% if(previousFeature != null) {%><%= previousFeature.getName() %>.<%}%><%=tgtFeaturePath.getLastFeature().getGetAccessor()%>().getName());
				<% } else if(tgtFeaturePath.isListType()) { // Enum => List %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[Enum => List]
				<% } else if(tgtFeaturePath.isJavaMappedType()) { // Enum => JavaMappedType %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[Enum => JavaMappedType]															
				<% } else { // Enum => EObject %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[Enum => EObject]
				<% } %>   							
			<% } else { %>
				<%if(tgtFeaturePath.isListType()) { // EObject => List %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[EObject => List]
				<% } else if(tgtFeaturePath.isJavaMappedType()) { // EObject => JavaMappedType %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[EObject => JavaMappedType]	
				<% } else if(tgtFeaturePath.isEnumType()) { // EObject => Enum %>
					<%@ include file="unsupportedMappingCase.insert.javajetinc" %>
					[EObject => Enum]				
				<% } else { // EObject => EObject %>
					<%@ include file="gEvalTargetFeaturePath.insert.javajetinc" %>
					if(untypedList.isEmpty()) {
						return null;
					}
					return (<%=gGenFeature.getEcoreFeature().getEType().getName()%>)untypedList.get(0);													
				<% } %>
			<% } %>
		<%} else { %>
			ERROR: An empty TargetFeaturePath was provided to the generator for this Feature!
		<% } %>	
	<% } %>
<%} else{%>
		// TODO: implement this method to return the '<%=gGenFeature.getFormattedName()%>' <%=gGenFeature.getFeatureKind()%>
		// Ensure that you remove @generated or mark it @generated NOT
	<%if (gGenFeature.isListType()) {%>
		// The list is expected to implement org.eclipse.emf.ecore.util.InternalEList and org.eclipse.emf.ecore.EStructuralFeature.Setting
		// so it's likely that an appropriate subclass of org.eclipse.emf.ecore.util.<%if (gGenFeature.isMapType()) {%>EcoreEMap<%} else if (gGenFeature.isFeatureMapType()) {%>BasicFeatureMap<%} else {%>EcoreEList<%}%> should be used.
	<%}%>
		throw new UnsupportedOperationException();
<%}%>