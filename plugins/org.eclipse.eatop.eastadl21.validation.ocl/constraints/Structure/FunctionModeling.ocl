/*******************************************************************************
 * Copyright (c) 10, 2014 Continental AG and others.
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 
 * which accompanies this distribution, and is
 * available at http://www.eclipse.org/org/documents/epl-v10.php
 *
 * Contributors: 
 * Continental AG - Initial API and implementation
 *******************************************************************************/

import 'platform:/resource/org.eclipse.eatop.eastadl2112/model/eastadl2112.ecore'

package eastadl21

context FunctionClientServerPort

inv SPEC_06: 
	self.kind = ClientServerKind::client 
	implies FunctionConnector.allInstances()->select(port.functionPort->select(i : FunctionClientServerPort | i = self)->size() = 1)->size() <= 1 

context FunctionConnector

inv SPEC_07: 
	self.port.functionPort->forAll(oclIsTypeOf(FunctionFlowPort)) 
	and self.port->forAll(functionPrototype->notEmpty())
	implies self.port->first().functionPort.oclAsType((FunctionFlowPort)).direction <> self.port->last().functionPort.oclAsType((FunctionFlowPort)).direction 
	or self.port.functionPort->forAll(oclAsType(FunctionFlowPort).direction = EADirectionKind::inout)

inv SPEC_08: 
	self.port.functionPort->forAll(oclIsTypeOf(FunctionFlowPort)) 
	and self.port->select(functionPrototype->notEmpty())->size() = 1
	implies self.port->first().functionPort.oclAsType((FunctionFlowPort)).direction = self.port->last().functionPort.oclAsType((FunctionFlowPort)).direction 
	or self.port.functionPort->forAll(oclAsType(FunctionFlowPort).direction = EADirectionKind::inout)
	
inv SPEC_09: 
	self.port.functionPort->forAll(oclIsTypeOf(FunctionClientServerPort)) 
	and self.port->forAll(functionPrototype->notEmpty())
	implies self.port->first().functionPort.oclAsType((FunctionClientServerPort)).kind <> self.port->last().functionPort.oclAsType((FunctionClientServerPort)).kind 

inv SPEC_10: 
	self.port.functionPort->forAll(oclIsTypeOf(FunctionClientServerPort)) 
	and self.port->select(functionPrototype->notEmpty())->size() = 1
	implies self.port->first().functionPort.oclAsType((FunctionClientServerPort)).kind = self.port->last().functionPort.oclAsType((FunctionClientServerPort)).kind 

inv SPEC_13: 
	self.port.functionPort->forAll(oclIsTypeOf(FunctionPowerPort))
	implies self.port->first().functionPort.oclAsType((FunctionPowerPort)).type = self.port->last().functionPort.oclAsType((FunctionPowerPort)).type

inv SPEC_add1:
	self.port.functionPort->forAll(oclIsTypeOf(FunctionFlowPort)) 
	or self.port.functionPort->forAll(oclIsTypeOf(FunctionPowerPort)) 
	or self.port.functionPort->forAll(oclIsTypeOf(FunctionClientServerPort)) 

context FunctionType

inv SPEC_12: 
	self.port->select(oclIsTypeOf(FunctionPowerPort))->notEmpty()
	implies self.oclIsTypeOf(HardwareFunctionType)
	or self.oclIsTypeOf(FunctionalDevice)
	or Environment.allInstances().environmentModel->select(oclIsKindOf(DesignFunctionPrototype)).oclAsType(DesignFunctionPrototype)->select(type = self)->notEmpty()
	or Environment.allInstances().environmentModel->select(oclIsKindOf(AnalysisFunctionPrototype)).oclAsType(AnalysisFunctionPrototype)->select(type = self)->notEmpty()
	
context FunctionPowerPort

inv SPEC_14: 
	self.type.datatypePrototype->size() = 2 
	and self.type.datatypePrototype->first().type = self.type.datatypePrototype->last().type
	and self.type.datatypePrototype->select(shortName = 'Across')->size() = 1
	and self.type.datatypePrototype->select(shortName = 'Through')->size() = 1
 
context PortGroup

inv SPEC_21: 
	self.port->select(oclIsKindOf(FunctionFlowPort))->forAll(oclAsType(FunctionFlowPort).direction = self.port->select(oclIsKindOf(FunctionFlowPort))->first().oclAsType(FunctionFlowPort).direction) 
	and self.port->select(oclIsKindOf(FunctionClientServerPort))->forAll(oclAsType(FunctionClientServerPort).kind = self.port->select(oclIsKindOf(FunctionClientServerPort))->first().oclAsType(FunctionClientServerPort).kind)

inv SPEC_22: 
	self.port->forAll(oclIsKindOf(FunctionFlowPort)) 
	or self.port->forAll(oclIsKindOf(FunctionClientServerPort))
	or self.port->forAll(oclIsKindOf(FunctionFlowPort))

endpackage