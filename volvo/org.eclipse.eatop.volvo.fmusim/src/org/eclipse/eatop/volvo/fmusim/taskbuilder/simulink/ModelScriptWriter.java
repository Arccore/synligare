package org.eclipse.eatop.volvo.fmusim.taskbuilder.simulink;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import org.eclipse.eatop.volvo.fmusim.Utils;
import org.eclipse.eatop.volvo.fmusim.taskbuilder.simulink.blocks.Block;
import org.eclipse.eatop.volvo.fmusim.taskbuilder.simulink.blocks.Scope;
import org.eclipse.eatop.volvo.fmusim.taskbuilder.simulink.blocks.Subsystem;
import org.eclipse.eatop.volvo.fmusim.taskbuilder.simulink.blocks.Trigger;
import org.eclipse.eatop.volvo.fmusim.taskbuilder.simulink.blocks.TriggeredSubsystem;
import org.eclipse.eatop.volvo.fmusim.userconfig.ConfigurationMgr;
import org.eclipse.eatop.volvo.fmusim.userconfig.VVStimuliXMLData;

public class ModelScriptWriter {

	//Namnmappa portar för mdl-filer behövs (otydligt vilken ordningen är från eatop om nummer)

	//generera en funktion (system, portname) ger portnummer tillbaka 
	
	/*
	 * Lägg till vid load
	load_system ('Kalle')
	Kalle_Inports = find_system('Kalle', 'SearchDepth',1,'BlockType','Inport');
	Kalle_Outports = find_system('Kalle', 'SearchDepth',1,'BlockType','Outport');

	//fixa access vid mdl: get port for "InportNamn"
	 strmatch('Kalle/InPortNamn', Kalle_Inports, 'exact')
	 
	 */
	
	
	
	
	//Serialize
	
	FileWriter file;
	BufferedWriter bw;
	
	public void writeModelScript(SimulinkSystem sSystem){
		
		//Open output file
		String sFilename = "c:\\fmusim\\generateFMUSimModel.m";
		
		try {
			file = new FileWriter(sFilename);
		} catch (IOException e) {
			Utils.showErrorMessage("Failed to open script: " +sFilename);
			return;
		}
		bw = new BufferedWriter(file);
		Block.setBufferedWriter(bw);
		Line.setBw(bw);
		
		try{
			writeHeader();
			writeCreateSystem(sSystem);
			
			recursiveWriteSystem(sSystem);

			writeAutomationEnd(sSystem);
			bw.close();
			
			}
		catch (IOException e)
		{
			Utils.showErrorMessage("Failed to write to script file. Details: " + e.getMessage());
		}
			
		
	}
	
	private void writeHeader() throws IOException{
		
		writeLn("% --------------------------------------------------------------------------------------");
		writeLn("% Auto-generated matlab script for creating and simulating a simulink model.");
		writeLn("% The simulation result is saved in FMUsimResult.txt");
		writeLn("% ");
		writeLn("% Usage: generateFMUSimModel               ...to create model only");
		writeLn("% Usage: automatic=1; generateFMUSimModel  ...to create model, simulate, save result & exit");
		writeLn("% ");
		writeLn("% This script was generated by EATOP FMUSim plugin 1.0 ");
		writeLn("% -------------------------------------------------------------------------------------");
		writeLn("");
		
	}

	private void writeCreateSystem(SimulinkSystem sSystem) throws IOException{
			
		writeLn("% Check if model already loaded ");
		writeLn("if bdIsLoaded('" + sSystem.getName() + "')");
		writeLn("	% If it is then close it without saving");
		writeLn("   close_system('" + sSystem.getName() + "',0);");
		writeLn("   end");
		writeLn("");

		writeLn("disp 'Creating FMUSim model'");
		writeLn("new_system('" + sSystem.getName() + "')");
		writeLn("open_system('" + sSystem.getName() + "')"); //change to load_system later
		writeLn("");
		
	}

	public void recursiveWriteSystem(SimulinkSystem sSystem) throws IOException{
		

		if (sSystem.topLevel)
		{
			writeLn("% ------------------------------------------------");
			writeLn("% System: " + sSystem.getName());
			writeLn("% ------------------------------------------------");

			writePorts(sSystem);

		}
		else {
			writeLn("% ------------------------------------------------");
			writeLn("% Subsystem: " + sSystem.getParentSubsystem().getFullPath());
			writeLn("% ------------------------------------------------");
			
			//inports & outports of this subsystem already written for parent
			
		}

		//Write blocks, including ports of subsystems
		List <Block> blocks = sSystem.getBlocks();
		for (Block block:blocks){
			
			if (block instanceof Trigger)
			{
				//triggers (ie triggerports) already written together with ports for parent subsystem
				// Do nothing
			}
			else {
				
				block.Write(bw);

				if (block instanceof Subsystem){
					Subsystem sub = (Subsystem)block;
					writePorts(sub.getSystem());
				}

			}
			
		}
		
		//Monitors 
		List <Subsystem> monitors = sSystem.getMonitors();
		for (Subsystem monitor:monitors){
			monitor.Write(bw);
			writePorts(monitor.getSystem());
		
		}
		
		//Lines	
		List <Line> lines = sSystem.getLines();
		for (Line line:lines){
				line.Write();
		}
			
		//Write subsystems blocks	
		blocks = sSystem.getBlocks();
		for (Block b:blocks){
			if (b instanceof Subsystem){
				
				Subsystem sub = (Subsystem)b;
				writeLn("");
				recursiveWriteSystem(sub.getSystem());
			}
		}
				
		//Write monitor blocks	
		List<Subsystem> mList = sSystem.getMonitors();
		for (Subsystem m:mList){

				recursiveWriteSystem(m.getSystem());
		}
	
		
		writeLn("");
		
	}
	

	//It's important to write the trigger before the inports.
	//The trigger block makes the subsystem trigged, and it's only then than it's possible
	//to set LatchByDelaingOutsideSignal on an inport to make it latched.
	private void writePorts(SimulinkSystem sSystem) throws IOException{
		//trigger inport
		if (sSystem.getParentSubsystem() != null){
			if (sSystem.getParentSubsystem() instanceof TriggeredSubsystem)
			{
				((TriggeredSubsystem)sSystem.getParentSubsystem()).getTrigger().Write(bw);
			}
		}

		//inports
		List <Block> inports = sSystem.getValueSources();
		for (Block inport:inports){
			inport.Write(bw);
		}

		//outports
		List <Block> outports = sSystem.getValueSinks();
		for (Block outport:outports){
			outport.Write(bw);
		}
		
	}
	
	private void writeAutomationEnd(SimulinkSystem sSystem) throws IOException	{
		{
			writeLn("% Check if running in automatic mode or not");
			writeLn("if ~exist('automatic','var');");
			writeLn("  automatic = 0;");
			writeLn("end");
			
			writeLn("if (automatic)");
			writeSimulateModel(sSystem);
			writeSaveSimulationResult(sSystem);

			writeLn("  close_system('" + sSystem.getName() + "', 0)");
			writeLn("end");
			
		}
		
		
	}
	private void writeSimulateModel(SimulinkSystem sSystem) throws IOException	{
		writeLn("%   ------------------------------------------------");
		writeLn("%   Simulate model");
		writeLn("%   ------------------------------------------------");
	
		writeLn("  simopt = simset('solver','ode45');"); 
		VVStimuliXMLData vvdata = ConfigurationMgr.getInstance().getVVStimuliXMLData();
		writeLn("  start_time = " + vvdata.getStartTime() +";");
		writeLn("  final_time = " + vvdata.getStopTime() +";");
	
		writeLn("  disp 'Starting simulation'");
		writeLn("  sim('" + sSystem.getName() + "',[start_time,final_time],simopt);");
		writeLn("");
	}
	
	private void writeSaveSimulationResult(SimulinkSystem sSystem) throws IOException	{
		writeLn("%   ------------------------------------------------");
		writeLn("%   Save simulation results to file");
		writeLn("%   ------------------------------------------------");
	
		writeLn("  fid = fopen('FMUsimResult.txt','w');");
		
		//Write all scopes, monitor data is saved in them
		for (Block scope: sSystem.getValueSinks())
		{
			writeLn("  fprintf (fid, '" + scope.getName() + " = \\n');");
			writeLn("  fprintf (fid,'%.6f %.6f\\n', " + scope.getName() +"');");
		}
		
		writeLn("  fclose(fid);");
	}

	
	private void writeLn(String s) throws IOException{
		bw.write(s + "\n");
	}

	private void write(String s) throws IOException{
		bw.write(s);
	}


}
