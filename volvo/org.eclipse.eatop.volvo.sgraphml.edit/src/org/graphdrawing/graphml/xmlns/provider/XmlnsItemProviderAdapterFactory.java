/**
 */
package org.graphdrawing.graphml.xmlns.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.graphdrawing.graphml.xmlns.util.XmlnsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class XmlnsItemProviderAdapterFactory extends XmlnsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public XmlnsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.graphdrawing.graphml.xmlns.DataExtensionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataExtensionTypeItemProvider dataExtensionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.graphdrawing.graphml.xmlns.DataExtensionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataExtensionTypeAdapter() {
		if (dataExtensionTypeItemProvider == null) {
			dataExtensionTypeItemProvider = new DataExtensionTypeItemProvider(this);
		}

		return dataExtensionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.graphdrawing.graphml.xmlns.DataExtensionType1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataExtensionType1ItemProvider dataExtensionType1ItemProvider;

	/**
	 * This creates an adapter for a {@link org.graphdrawing.graphml.xmlns.DataExtensionType1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataExtensionType1Adapter() {
		if (dataExtensionType1ItemProvider == null) {
			dataExtensionType1ItemProvider = new DataExtensionType1ItemProvider(this);
		}

		return dataExtensionType1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.graphdrawing.graphml.xmlns.DataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataTypeItemProvider dataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.graphdrawing.graphml.xmlns.DataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataTypeAdapter() {
		if (dataTypeItemProvider == null) {
			dataTypeItemProvider = new DataTypeItemProvider(this);
		}

		return dataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.graphdrawing.graphml.xmlns.DefaultType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefaultTypeItemProvider defaultTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.graphdrawing.graphml.xmlns.DefaultType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefaultTypeAdapter() {
		if (defaultTypeItemProvider == null) {
			defaultTypeItemProvider = new DefaultTypeItemProvider(this);
		}

		return defaultTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.graphdrawing.graphml.xmlns.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.graphdrawing.graphml.xmlns.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.graphdrawing.graphml.xmlns.EdgeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeTypeItemProvider edgeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.graphdrawing.graphml.xmlns.EdgeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeTypeAdapter() {
		if (edgeTypeItemProvider == null) {
			edgeTypeItemProvider = new EdgeTypeItemProvider(this);
		}

		return edgeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.graphdrawing.graphml.xmlns.EndpointType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndpointTypeItemProvider endpointTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.graphdrawing.graphml.xmlns.EndpointType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndpointTypeAdapter() {
		if (endpointTypeItemProvider == null) {
			endpointTypeItemProvider = new EndpointTypeItemProvider(this);
		}

		return endpointTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.graphdrawing.graphml.xmlns.GraphmlType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphmlTypeItemProvider graphmlTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.graphdrawing.graphml.xmlns.GraphmlType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphmlTypeAdapter() {
		if (graphmlTypeItemProvider == null) {
			graphmlTypeItemProvider = new GraphmlTypeItemProvider(this);
		}

		return graphmlTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.graphdrawing.graphml.xmlns.GraphType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphTypeItemProvider graphTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.graphdrawing.graphml.xmlns.GraphType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphTypeAdapter() {
		if (graphTypeItemProvider == null) {
			graphTypeItemProvider = new GraphTypeItemProvider(this);
		}

		return graphTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.graphdrawing.graphml.xmlns.HyperedgeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HyperedgeTypeItemProvider hyperedgeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.graphdrawing.graphml.xmlns.HyperedgeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHyperedgeTypeAdapter() {
		if (hyperedgeTypeItemProvider == null) {
			hyperedgeTypeItemProvider = new HyperedgeTypeItemProvider(this);
		}

		return hyperedgeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.graphdrawing.graphml.xmlns.KeyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyTypeItemProvider keyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.graphdrawing.graphml.xmlns.KeyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyTypeAdapter() {
		if (keyTypeItemProvider == null) {
			keyTypeItemProvider = new KeyTypeItemProvider(this);
		}

		return keyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.graphdrawing.graphml.xmlns.LocatorType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocatorTypeItemProvider locatorTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.graphdrawing.graphml.xmlns.LocatorType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocatorTypeAdapter() {
		if (locatorTypeItemProvider == null) {
			locatorTypeItemProvider = new LocatorTypeItemProvider(this);
		}

		return locatorTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.graphdrawing.graphml.xmlns.NodeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeTypeItemProvider nodeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.graphdrawing.graphml.xmlns.NodeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeTypeAdapter() {
		if (nodeTypeItemProvider == null) {
			nodeTypeItemProvider = new NodeTypeItemProvider(this);
		}

		return nodeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.graphdrawing.graphml.xmlns.PortType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortTypeItemProvider portTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.graphdrawing.graphml.xmlns.PortType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortTypeAdapter() {
		if (portTypeItemProvider == null) {
			portTypeItemProvider = new PortTypeItemProvider(this);
		}

		return portTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dataExtensionTypeItemProvider != null) dataExtensionTypeItemProvider.dispose();
		if (dataExtensionType1ItemProvider != null) dataExtensionType1ItemProvider.dispose();
		if (dataTypeItemProvider != null) dataTypeItemProvider.dispose();
		if (defaultTypeItemProvider != null) defaultTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (edgeTypeItemProvider != null) edgeTypeItemProvider.dispose();
		if (endpointTypeItemProvider != null) endpointTypeItemProvider.dispose();
		if (graphmlTypeItemProvider != null) graphmlTypeItemProvider.dispose();
		if (graphTypeItemProvider != null) graphTypeItemProvider.dispose();
		if (hyperedgeTypeItemProvider != null) hyperedgeTypeItemProvider.dispose();
		if (keyTypeItemProvider != null) keyTypeItemProvider.dispose();
		if (locatorTypeItemProvider != null) locatorTypeItemProvider.dispose();
		if (nodeTypeItemProvider != null) nodeTypeItemProvider.dispose();
		if (portTypeItemProvider != null) portTypeItemProvider.dispose();
	}

}
